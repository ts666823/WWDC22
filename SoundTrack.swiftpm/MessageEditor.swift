//
//  File.swift
//  SoundTrack
//
//  Created by 唐烁 on 2022/4/24.
//

import SwiftUI

struct QuestionMessage: Identifiable,Codable{
    var id:Int
    var text:String
}

struct MessageEditor: View {
    
    var messageArray = [
        Message(id: 0, text: "What is sound?", received: false, haveImage: false, image: ""),
        Message(id: 1, text: "In physics, sound is a vibration that propagates as an acoustic wave, through a transmission medium such as a gas, liquid or solid.", received: true, haveImage: false, image: ""),
        Message(id: 2, text: "How do we represent sound in a computer?", received: false, haveImage: false, image: ""),
        Message(id: 3, text: "Sound can be expressed as a mixture of sine waves with different frequencies. The frequency of the bottom wave is higher than that of the upper wave. The horizontal axis represents time.", received: true, haveImage: false, image: ""),
        Message(id: 4, text: "Is there a sample image here?", received: false, haveImage: false, image: ""),
        Message(id: 5, text: "", received: true, haveImage: true, image: "a1"),
        Message(id: 6, text: "How to use swift to make single frequency sound?", received: false, haveImage: false, image: ""),
        Message(id: 7, text: "There are two steps here. In the first step, we will learn how to make a sound curve. In the second part, we will use AVFoundation and AudioUnit to control the device to make sound", received: true, haveImage: false, image: ""),
        Message(id: 8, text: "First Step", received: false, haveImage: false, image: ""),
        Message(id: 9, text: "First, we need to understand the two concepts of sampling rate and sound frequency. We can get the number of sampling points by the product of sampling rate and duration, and then get a sampling range by the product of sound frequency, duration and 2 π. Then sample the sin function within this range to get the data to be played", received: true, haveImage: false, image: ""),
        Message(id: 10, text: "Sinx", received: false, haveImage: false, image: ""),
        Message(id: 11, text: "", received: true, haveImage: true, image: "sin"),
        Message(id: 12, text: "Second Step", received: false, haveImage: false, image: ""),
        Message(id: 13, text: "Use avaudioformat to set the corresponding format, and use auaudiounit Outputprovider sets the output, where inputdatalist fills in the data we sampled", received: true, haveImage: false, image: ""),
        Message(id: 14, text: "Listen to the sound you make", received: false, haveImage: false, image: ""),
        Message(id: 15, text: "Tap to listen(Frequecy 329.6Hz)", received: true, haveImage: false, image: ""),
        Message(id: 16, text: "How to make our sound more like guitar?", received: false, haveImage: false, image: ""),
        Message(id: 17, text: "The sound we just made is 329.6hz sound, which is called pure sound in physics. In fact, the frequency of the sound of various musical instruments fluctuates in a certain range.", received: true, haveImage: false, image: ""),
        Message(id: 18, text: "Example", received: false, haveImage: false, image: ""),
        Message(id: 19, text: "", received: true, haveImage: true, image: "frequency"),
        Message(id: 20, text: "Explanation", received: false, haveImage: false, image: ""),
        Message(id: 21, text: "Although the sound generated just now has the same empty string audio rate as that of Guitar 1 string, it doesn't sound like guitar at all.", received: true, haveImage: false, image: ""),
        Message(id: 22, text: "How to simulate guitar timbre?", received: false, haveImage: false, image: ""),
        Message(id: 23, text: "First, we use the function to fit the timbre curve of the guitar", received: true, haveImage: false, image: ""),
        Message(id: 24, text: "Next?", received: false, haveImage: false, image: ""),
        Message(id: 25, text: "We need to know about guitar. The tones from the first string to the sixth string are 329.6hz, 246.9hz, 196.0hz, 146.8hz, 110.0hz and 82.4hz respectively. On the same string, the frequencies of all frets from low to high are an equal ratio sequence, with a ratio of 2 ^ (1 / 12)", received: true, haveImage: false, image: ""),
        Message(id: 26, text: "Then?", received: false, haveImage: false, image: ""),
        Message(id: 27, text: "Using the array FS = [329.6, 246.9, 196.0, 146.8, 110.0, 82.4], the evaluation rate of each fret can be obtained by the formula fs[(Int(i) / 100) % 10 - 1] * pow(2,Double((i % 100)) / 12), and then the corresponding sampling points can be generated by the fitting function, so we can get a simulated guitar!", received: true, haveImage: false, image: ""),
        Message(id: 28, text: "Have a try!", received: false, haveImage: false, image: ""),
        Message(id: 29, text: "Tap to listen Castle in the Sky", received: true, haveImage: false, image: ""),
        
    ]
    
    var questionMessages = [
        [QuestionMessage(id: 0, text: "What is sound?"),
        QuestionMessage(id: 2, text: "How do we represent sound in a computer?"),
        QuestionMessage(id: 4, text: "Is there a sample image here?")],
        [QuestionMessage(id: 6, text: "How to use swift to make single frequency sound?"),
        QuestionMessage(id: 8, text: "First Step"),
        QuestionMessage(id: 10, text: "Sinx"),
        QuestionMessage(id: 12, text: "Second Step"),
        QuestionMessage(id: 14, text: "Listen to the sound you make")],
        [QuestionMessage(id: 16, text: "How to make our sound more like guitar?"),
         QuestionMessage(id: 18, text: "Example"),
         QuestionMessage(id: 20, text: "Explanation"),
         QuestionMessage(id: 22, text: "How to simulate guitar timbre?"),
         QuestionMessage(id: 24, text: "Next?"),
         QuestionMessage(id: 26, text: "Then?"),
         QuestionMessage(id: 28, text: "Have a try!")
        ]
    ]
    
    @State private var message = ""
    @State private var index = 0
    @EnvironmentObject var messageManager : MessagesManager
    @Binding var scroll : Int
    
    var body: some View{
        VStack {
            HStack{
                MessageTextField(placeholder: Text("Enter your message here").foregroundColor(.black), text: $message)
                    .foregroundColor(.black)
                Button{
                    messageManager.sendMessage(tempMessages: [messageArray[index],messageArray[index + 1]])
                } label: {
                    Image(systemName: "paperplane.fill")
                        .foregroundColor(.white)
                        .padding(10)
                        .background(Color.orange)
                        .cornerRadius(50)
                }
            }
            .padding(.horizontal)
            .padding(.vertical, 10)
            .background(Color("gray"))
            .cornerRadius(50)
            .padding()
            ScrollView(.horizontal){
                HStack{
                    ForEach(questionMessages[scroll]){message in
                        Button {
                            self.message = message.text
                            self.index = message.id
                        } label: {
                            Text(message.text)
                                .foregroundColor(.black)
                                .padding()
                                .background(Color("gray"))
                                .cornerRadius(30)
                        }
                    }
                }
            }
        }
    }
}

struct MessageTextField: View {
    var placeholder: Text
    @Binding var text : String
    
    var editingChanged:(Bool) -> () = {_ in}
    var commit: () -> () = {}
    var body: some View{
        ZStack(alignment: .leading){
            if text.isEmpty {
                placeholder.opacity(0.5)
            }
            TextField("", text: $text, onEditingChanged: editingChanged,onCommit:  commit)
        }
    }
}
